#
# This helper script configures the system for our custom Message of the Day
# GIT repository.
#

- name: Install and Apply Message of the Day Settings Block
  become: true
  block:
  ###[ Install Packages ]######################################################
  - name: Install packages needed for Message of the Day and hddtemp
    apt:
      name: ['git','update-motd','figlet','lolcat','hddtemp','bc','bsdmainutils']
      state: present
      install_recommends: no
    when:
      - ansible_os_family == "Debian"

  - name: Install Ubuntu Specific packages used by Message of the Day
    apt:
      name: ['update-notifier-common']
      state: present
      install_recommends: no
    when:
      - ansible_distribution == 'Ubuntu'

  ###[ Disable Existing MOTD Items We Don't Want ]#############################
  - name: Check if MOTD files to turn off exist
    stat:
      path: "{{motd_path}}/{{ item }}"
    with_items: "{{motd_entries.to_disable}}"
    register: my_stat

  - name: Turn off MOTD entries we won't be using
    file:
      path: "{{motd_path}}/{{item}}"
      mode: -x
      state: file
    loop: "{{ my_stat.results | selectattr('stat.exists') | map(attribute='item') | list }}"

  - name: Turn off MOTD entries defined by file globs
    shell:
      cmd: "chmod -x {{motd_path}}/{{item}}"
    with_items: "{{motd_entries.file_globs_to_disable|default([])}}"

  - name: Check if MOTD files to unlink exist
    stat:
      path: "{{motd_path}}/{{ item }}"
    with_items: "{{motd_entries.to_unlink}}"
    register: my_stat

  - name: Unlink MOTD entries we won't be using
    file:
      path: "{{motd_path}}/{{item}}"
      state: absent
    loop: "{{ my_stat.results | selectattr('stat.exists') | map(attribute='item') | list }}"

  - name: Disable Ubuntu News Advertisement
    ini_file:
      path: /etc/default/motd-news
      section:
      option: "ENABLED"
      value: "{{show_ubuntu_news_message}}"
      no_extra_spaces: yes
      mode: '0644'
      create: no
    ignore_errors: true
    when:
    - ansible_distribution == 'Ubuntu'
  
  ###[ Configure HDDTemp ]#####################################################

  # HDDTemp may not detect Temperature Sensors for SSDs, add manual entries
  - name: Add manual entries to /etc/hddtemp.db
    lineinfile:
      path: "/etc/hddtemp.db"
      regexp: "^{{item}}"
      line: "{{item}}"
      state: present
    loop: "{{manual_entries_to_hddtemp|list}}"

  # Get the last device letter from each active device, this is needed for hddtmp monitoring
  # If "disk_devices" contains ['sda','sdb','sdc'] then device_letters is "abc"
  - name: Construct device letter string
    set_fact:
      device_letters: "{{device_letters|default('') + item[-1]}}"
    loop:
     "{{disk_devices}}"

  # hddtemp can only take a limited number of devices; which is a limit on the number of
  # parameters which can be passed via the command line.  Break up the disk device list 
  # into chunks the size defined by "hddtemp_num_devices"
  
  - name: "Chunk device letter string by {{hddtemp_num_devices}}"
    set_fact:
      device_letters: "{{ device_letters | regex_findall('.{1,' + hddtemp_num_devices|string +'}') }}"

  - name: Creates @reboot CRON entry for HDDTemp instances
    cron:
      name: "Load hddtemp at reboot for port {{hddtemp_port+hddtemp_num_instances}}"
      special_time: reboot
      job: "/usr/sbin/hddtemp -d /dev/sd[{{item}}] --unit={{hddtemp_temp_unit}} --listen=localhost --port={{hddtemp_port+hddtemp_num_instances}}"
    loop:
      "{{device_letters}}"
    loop_control:
      index_var: hddtemp_num_instances

  ###[ Configure Custom Message of the Day ]###################################
  - name: Create the GIT directory if does not exist already
    file: 
     path: "{{git_root_path|default('/root/git')}}"
     state: directory
     mode: '0750'

  - name: Clone GIT repository - overwrite anything locally modified
    git:
      repo: "{{motd_git_repo}}"
      accept_hostkey: yes
      clone: yes
      force: yes
      dest: "{{git_root_path}}/motd"

  - name: Enable the Custom Message of the Day Files
    copy:
      src: "{{git_root_path}}/motd/{{item}}"
      dest: "{{motd_path}}"
      remote_src: yes
      mode: '0755'
      owner: root
      group: root
      force: yes
    with_items: 
      - "{{motd_entries.enable_these_for_all_hosts}}"
      - "{{more_motd_entries|default([])}}"

  - name: Check if NEW MOTD File was Generated
    stat:
      path: "/run/motd.dynamic.new"
    register: my_stat

  - name: Replace OLD MOTD with NEW one Generated
    copy:
      src: "/run/motd.dynamic.new"
      dest: "/run/motd.dynamic"
      remote_src: yes
      mode: '0644'
      owner: root
      group: root
      force: yes
    when: my_stat.stat.exists

  when:
  - ansible_os_family == "Debian"

  tags:
  - setup_motd
